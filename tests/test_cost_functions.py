import levitate
import levitate.cost_functions
import numpy as np

from levitate.materials import Air
Air.c = 343
Air.rho = 1.2

array = levitate.arrays.RectangularArray(shape=(2, 1))
pos_1 = np.array([0.1, 0.2, 0.3])
pos_2 = np.array([-0.15, 1.27, 0.001])
both_pos = np.stack((pos_1, pos_2), axis=1)
array.phases = array.focus_phases((pos_1 + pos_2) / 2)


def test_gorkov_divergence():
    func_1 = levitate.cost_functions.gorkov_divergence(array, pos_1, weights=None)
    func_2 = levitate.cost_functions.gorkov_divergence(array, pos_2, weights=None)
    func_12 = levitate.cost_functions.gorkov_divergence(array, both_pos, weights=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([2.30070037e-11, -1.62961537e-12, -2.44442306e-12]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.gorkov_divergence(array, pos_1, weights=False)
    func_2 = levitate.cost_functions.gorkov_divergence(array, pos_2, weights=False)
    func_12 = levitate.cost_functions.gorkov_divergence(array, both_pos, weights=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([2.30070037e-11, -1.62961537e-12, -2.44442306e-12]))
    np.testing.assert_allclose(phase_jac_1, np.array([[-1.79047948e-11, 1.79047948e-11], [-9.84604578e-13, 9.84604578e-13], [-1.47690687e-12, 1.47690687e-12]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[2.30839871e-11, 2.29300203e-11], [-1.69118632e-12, -1.56804442e-12], [-2.53677948e-12, -2.35206663e-12]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.gorkov_divergence(array, pos_1, weights=(1, 1, 1))
    func_2 = levitate.cost_functions.gorkov_divergence(array, pos_2, weights=(1, 1, 1))
    func_12 = levitate.cost_functions.gorkov_divergence(array, both_pos, weights=(1, 1, 1))
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, 1.893296525220701e-11)
    np.testing.assert_allclose(phase_jac_1, np.array([-2.03663063e-11, 2.03663063e-11]))
    np.testing.assert_allclose(ampl_jac_1, np.array([1.88560212e-11, 1.90099093e-11]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_gorkov_laplacian():
    func_1 = levitate.cost_functions.gorkov_laplacian(array, pos_1, weights=None)
    func_2 = levitate.cost_functions.gorkov_laplacian(array, pos_2, weights=None)
    func_12 = levitate.cost_functions.gorkov_laplacian(array, both_pos, weights=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([-3.98121194e-10, 8.74737783e-12, 2.98666962e-11]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.gorkov_laplacian(array, pos_1, weights=False)
    func_2 = levitate.cost_functions.gorkov_laplacian(array, pos_2, weights=False)
    func_12 = levitate.cost_functions.gorkov_laplacian(array, both_pos, weights=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([-3.98121194e-10, 8.74737783e-12, 2.98666962e-11]))
    np.testing.assert_allclose(phase_jac_1, np.array([[-3.33886801e-10, 3.33886801e-10], [-1.94724287e-11, 1.94724287e-11], [-3.76591861e-11, 3.76591861e-11]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[-3.98912624e-10, -3.97329763e-10], [8.96724049e-12, 8.52751518e-12], [3.07462056e-11, 2.89871868e-11]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.gorkov_laplacian(array, pos_1, weights=(1, 1, 1))
    func_2 = levitate.cost_functions.gorkov_laplacian(array, pos_2, weights=(1, 1, 1))
    func_12 = levitate.cost_functions.gorkov_laplacian(array, both_pos, weights=(1, 1, 1))
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, -3.595071196216751e-10)
    np.testing.assert_allclose(phase_jac_1, np.array([-3.91018416e-10, 3.91018416e-10]))
    np.testing.assert_allclose(ampl_jac_1, np.array([-3.59199178e-10, -3.59815061e-10]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_second_order_force():
    func_1 = levitate.cost_functions.second_order_force(array, pos_1, weights=None)
    func_2 = levitate.cost_functions.second_order_force(array, pos_2, weights=None)
    func_12 = levitate.cost_functions.second_order_force(array, both_pos, weights=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([1.83399145e-10, 4.15099186e-10, 6.22648779e-10]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.second_order_force(array, pos_1, weights=False)
    func_2 = levitate.cost_functions.second_order_force(array, pos_2, weights=False)
    func_12 = levitate.cost_functions.second_order_force(array, both_pos, weights=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([1.83399145e-10, 4.15099186e-10, 6.22648779e-10]))
    np.testing.assert_allclose(phase_jac_1, np.array([[-3.89064704e-10, 3.89064704e-10], [-8.13263002e-10, 8.13263002e-10], [-1.21989450e-09, 1.21989450e-09]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[2.03139282e-10, 1.63659008e-10], [4.04354167e-10, 4.25844205e-10], [6.06531251e-10, 6.38766308e-10]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.second_order_force(array, pos_1, weights=(1, 1, 1))
    func_2 = levitate.cost_functions.second_order_force(array, pos_2, weights=(1, 1, 1))
    func_12 = levitate.cost_functions.second_order_force(array, both_pos, weights=(1, 1, 1))
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, 1.221147110725865e-09)
    np.testing.assert_allclose(phase_jac_1, np.array([-2.42222221e-09, 2.42222221e-09]))
    np.testing.assert_allclose(ampl_jac_1, np.array([1.21402470e-09, 1.22826952e-09]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_second_order_stiffness():
    func_1 = levitate.cost_functions.second_order_stiffness(array, pos_1, weights=None)
    func_2 = levitate.cost_functions.second_order_stiffness(array, pos_2, weights=None)
    func_12 = levitate.cost_functions.second_order_stiffness(array, both_pos, weights=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([-5.37791668e-09, 2.56362884e-09, 3.17379497e-09]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.second_order_stiffness(array, pos_1, weights=False)
    func_2 = levitate.cost_functions.second_order_stiffness(array, pos_2, weights=False)
    func_12 = levitate.cost_functions.second_order_stiffness(array, both_pos, weights=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([-5.37791668e-09, 2.56362884e-09, 3.17379497e-09]))
    np.testing.assert_allclose(phase_jac_1, np.array([[2.54837811e-09, -2.54837811e-09], [-2.22777029e-09, 2.22777029e-09], [7.04106016e-11, -7.04106016e-11]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[-5.51989676e-09, -5.23593661e-09], [2.58655676e-09, 2.54070091e-09], [3.29253917e-09, 3.05505076e-09]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.second_order_stiffness(array, pos_1, weights=(1, 1, 1))
    func_2 = levitate.cost_functions.second_order_stiffness(array, pos_2, weights=(1, 1, 1))
    func_12 = levitate.cost_functions.second_order_stiffness(array, both_pos, weights=(1, 1, 1))
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, 3.595071196216047e-10)
    np.testing.assert_allclose(phase_jac_1, np.array([3.91018416e-10, -3.91018416e-10]))
    np.testing.assert_allclose(ampl_jac_1, np.array([3.59199178e-10, 3.59815061e-10]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_pressure():
    func_1 = levitate.cost_functions.pressure(array, pos_1, weight=None)
    func_2 = levitate.cost_functions.pressure(array, pos_2, weight=None)
    func_12 = levitate.cost_functions.pressure(array, both_pos, weight=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array(12.06891691 + 8.0652423j))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.pressure(array, pos_1, weight=False)
    func_2 = levitate.cost_functions.pressure(array, pos_2, weight=False)
    func_12 = levitate.cost_functions.pressure(array, both_pos, weight=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array(2.10706889e+02))
    np.testing.assert_allclose(phase_jac_1, np.array([[-4.15076576e+02, 4.15076576e+02]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[2.07034544e+02, 2.14379234e+02]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.pressure(array, pos_1, weight=1)
    func_2 = levitate.cost_functions.pressure(array, pos_2, weight=1)
    func_12 = levitate.cost_functions.pressure(array, both_pos, weight=1)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array(2.10706889e+02))
    np.testing.assert_allclose(phase_jac_1, np.array([-4.15076576e+02, 4.15076576e+02]))
    np.testing.assert_allclose(ampl_jac_1, np.array([2.07034544e+02, 2.14379234e+02]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_velocity():
    func_1 = levitate.cost_functions.velocity(array, pos_1, weights=None)
    func_2 = levitate.cost_functions.velocity(array, pos_2, weights=None)
    func_12 = levitate.cost_functions.velocity(array, both_pos, weights=None)
    val_1 = func_1(array.phases, array.amplitudes)
    val_2 = func_2(array.phases, array.amplitudes)
    val_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([0.007327894037 + 0.005975043874j, 0.015709392689 + 0.010421270107j, 0.023564089034 + 0.015631905161j]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))

    func_1 = levitate.cost_functions.velocity(array, pos_1, weights=False)
    func_2 = levitate.cost_functions.velocity(array, pos_2, weights=False)
    func_12 = levitate.cost_functions.velocity(array, both_pos, weights=False)
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, np.array([8.93991803e-05, 3.55387889e-04, 7.99622751e-04]))
    np.testing.assert_allclose(phase_jac_1, np.array([[-0.000174546016, 0.000174546016], [-0.000699933899, 0.000699933899], [-0.001574851272, 0.001574851272]]))
    np.testing.assert_allclose(ampl_jac_1, np.array([[1.07974283e-04, 7.08240775e-05], [3.43002548e-04, 3.67773230e-04], [7.71755733e-04, 8.27489769e-04]]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))

    func_1 = levitate.cost_functions.velocity(array, pos_1, weights=(1, 1, 1))
    func_2 = levitate.cost_functions.velocity(array, pos_2, weights=(1, 1, 1))
    func_12 = levitate.cost_functions.velocity(array, both_pos, weights=(1, 1, 1))
    val_1, phase_jac_1, ampl_jac_1 = func_1(array.phases, array.amplitudes)
    val_2, phase_jac_2, ampl_jac_2 = func_2(array.phases, array.amplitudes)
    val_12, phase_jac_12, ampl_jac_12 = func_12(array.phases, array.amplitudes)
    np.testing.assert_allclose(val_1, 0.001244409821)
    np.testing.assert_allclose(phase_jac_1, np.array([-0.002449331187, 0.002449331187]))
    np.testing.assert_allclose(ampl_jac_1, np.array([0.001222732565, 0.001266087077]))
    np.testing.assert_allclose(val_12, np.stack([val_1, val_2], -1))
    np.testing.assert_allclose(phase_jac_12, np.stack([phase_jac_1, phase_jac_2], -1))
    np.testing.assert_allclose(ampl_jac_12, np.stack([ampl_jac_1, ampl_jac_2], -1))


def test_vector_target():
    calc_func = levitate.cost_functions.gorkov_divergence(array, pos_1, weights=False)
    vector_func = levitate.cost_functions.vector_target(calc_func, target_vector=(1e-9, 2e-9, 3e-9), weights=(3**0.5, 2**0.5, 1))
    val, phase_jac, ampl_jac = vector_func(array.phases, array.amplitudes)
    np.testing.assert_allclose(val, 1.9891260692384784e-17)
    np.testing.assert_allclose(phase_jac, np.array([1.21709071e-19, -1.21709071e-19]))
    np.testing.assert_allclose(ampl_jac, np.array([-1.06543769e-19, -1.07736340e-19]))
    val_cpx, phase_jac_cpx, ampl_jac_cpx = vector_func(complex_amplitudes=array.complex_amplitudes)
    np.testing.assert_allclose(val, val_cpx)
    np.testing.assert_allclose(phase_jac, phase_jac_cpx)
    np.testing.assert_allclose(ampl_jac, ampl_jac_cpx)
    val_kwrd, phase_jac_kwrd, ampl_jac_kwrd = vector_func(amplitudes=array.amplitudes, phases=array.phases)
    np.testing.assert_allclose(val, val_kwrd)
    np.testing.assert_allclose(phase_jac, phase_jac_kwrd)
    np.testing.assert_allclose(ampl_jac, ampl_jac_kwrd)


def test_amplitude_limiting():
    func = levitate.cost_functions.amplitude_limiting(array)
    val, phase_jac, amp_jac = func(array.phases, array.amplitudes)
    jac = np.concatenate([phase_jac, amp_jac])
    np.testing.assert_allclose(val, 2.000000000000007e-08)
    np.testing.assert_allclose(jac, np.array([0.e+00, 0.e+00, 4.e-06, 4.e-06]))


def test_minimize():
    pos = np.array([5, -2, 80]) * 1e-3
    array = levitate.arrays.RectangularArray(shape=2)
    stiffness = levitate.cost_functions.second_order_stiffness(array, pos, weights=(-1, -1, -1))
    zero_pressure = levitate.cost_functions.pressure(array, pos, weight=1e-3)
    quiet_zone_p = levitate.cost_functions.pressure(array, np.array([-5, -2, 60]) * 1e-3, weight=1)
    quiet_zone_v = levitate.cost_functions.velocity(array, np.array([-5, -2, 60]) * 1e-3, weights=(1, 1, 1))
    array.phases = array.focus_phases(pos) + array.signature(stype='twin')
    result = levitate.cost_functions.minimize(zero_pressure, array)
    result = levitate.cost_functions.minimize([zero_pressure, stiffness], array, variable_amplitudes=True)
    result = levitate.cost_functions.minimize([[stiffness, zero_pressure], [stiffness, zero_pressure, quiet_zone_p, quiet_zone_v]], array)
    result = levitate.cost_functions.minimize([[stiffness, zero_pressure], [stiffness, zero_pressure, quiet_zone_p, quiet_zone_v]], array, constrain_transducers=[0, 3])
    result, status = levitate.cost_functions.minimize([[stiffness, zero_pressure], [stiffness, zero_pressure, quiet_zone_p, quiet_zone_v]], array, basinhopping=True, minimize_kwargs={'tol': 1e-6}, callback=lambda **kwargs: False, return_optim_status=True)
